<?php
/*
    modelreview.module for the CoMSES Computational Model Library
    Copyright (C) 2012. Nathan D. Rollins, Research Network for Computational
        Modeling for the SocioEcological Sciences (CoMSES Net)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/**
 * Include the module forms
 */
module_load_include('inc', 'modelreview', 'includes/modelreview.pages');

/**
 * Implementation of hook_help()
 */
function modelreview_help($path, $arg) {
  if ($path == 'admin/help#modelreview') {
    $txt = 'The CoMSES Model Review module provides an interface for reviewing and certifying models.';
    return '<p>' . t($txt) . '</p>';
  }
}

/**
 * Implementation of hook_init()
 *
 */
function modelreview_init() {
  drupal_add_css(drupal_get_path('module', 'modelreview') . '/includes/modelreview.css');
}

/**
 * Implementation of hook_views_api().
 *
 * This tells drupal that there is Views integration file named 
 * modelreview.views.inc 
 */
function modelreview_views_api() {
  // Note that you can include 'path' in this array so that your views.inc 
  // file can be stored in a different location.
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'modelreview') .'/includes',
  );
}

/**
 * Implementation of hook_theme()
 * 
 */
function modelreview_theme() {
  return array(
    'author_status_page' => array(
      'variables' => array(
        'model_nid' => NULL,
        'modelversion_nid' => NULL,
        'rid' => NULL,
        'sid' => NULL,
        'related' => NULL,
        'statusid' => NULL,
        'statusdate' => NULL,
        'status' => NULL,
        'reviewer' => NULL,
      ),
      'template' => 'author-status-page',
      'path' => drupal_get_path('module', 'modelreview') . '/tpl',
    ),
    'editor_status_page' => array(
      'variables' => array(
        'model_nid' => NULL,
        'modelversion_nid' => NULL,
        'rid' => NULL,
        'sid' => NULL,
        'related' => NULL,
        'statusid' => NULL,
        'statusdate' => NULL,
        'status' => NULL,
        'reviewer' => NULL,
      ),
      'template' => 'editor-status-page',
      'path' => drupal_get_path('module', 'modelreview') . '/tpl',
    ),
    'reviewer_status_page' => array(
      'variables' => array(
        'model_nid' => NULL,
        'modelversion_nid' => NULL,
        'rid' => NULL,
        'sid' => NULL,
        'related' => NULL,
        'statusid' => NULL,
        'statusdate' => NULL,
        'status' => NULL,
        'reviewer' => NULL,
      ),
      'template' => 'reviewer-status-page',
      'path' => drupal_get_path('module', 'modelreview') . '/tpl',
    ),
    'info_review_page' => array(
      'variables' => array(
      ),
      'template' => 'info-review-page',
      'path' => drupal_get_path('module', 'modelreview') . '/tpl',
    ),
    'request_review_page' => array(
      'variables' => array(
        'model_nid' => NULL,
      ),
      'template' => 'request-review-page',
      'path' => drupal_get_path('module', 'modelreview') . '/tpl',
    ),
    'review_queues_page' => array(
      'variables' => array(
        'model_nid' => NULL,
        'modelversion_nid' => NULL,
        'rid' => NULL,
        'sid' => NULL,
        'related' => NULL,
        'statusid' => NULL,
        'statusdate' => NULL,
        'status' => NULL,
        'reviewer' => NULL,
      ),
      'template' => 'review-queues-page',
      'path' => drupal_get_path('module', 'modelreview') . '/tpl',
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function modelreview_menu() {

  $items['admin/config/comses_settings'] = array(
    'title' => 'CoMSES Modules Settings',
    'description' => "Configuration settings for CoMSES Model Library features",
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer model reviews'),
    'position' => 'right',
    'weight' => 10,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/comses_settings/modelreviews'] = array(
    'title' => 'Model Reviews',
    'description' => "Configuration settings for Model Reviews",
    'page callback' => 'modelreview_admin',
    'access arguments' => array('administer model reviews'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Review Status page
  $items['model/%/review/status'] = array(
    'title' => 'Review',
    'description' => "",
    'page callback' => 'modelreview_goto_status',
    'page arguments' => array(array(1)),
    'access callback' => 'modelreview_access_content',
    'access arguments' => array(array('edit review', 'review model', 'edit any model', 'edit own model')),
    'type' => MENU_CALLBACK,
  );

  $items['model/%/review/status/author'] = array(
    'title' => 'Author',
    'description' => "",
    'page callback' => 'modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => 'modelreview_access_content',
    'access arguments' => array(array('edit any model', 'edit own model')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['model/%/review/status/editor'] = array(
    'title' => 'Editor',
    'description' => "",
    'page callback' => 'modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => 'modelreview_access_content',
    'access arguments' => array(array('edit review')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['model/%/review/status/reviewer'] = array(
    'title' => 'Reviewer',
    'description' => "",
    'page callback' => 'modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => 'modelreview_access_content',
    'access arguments' => array(array('review model')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  ); 

  // Info on model reviews and request page
  $items['model/%/review/info'] = array(
    'title' => 'Request A Model Review',
    'description' => "",
    'page callback' => 'modelreview_request_page',
    'access callback' => 'modelreview_access_content',
    'access arguments' => array(array('edit any model', 'edit own model')),
    'type' => MENU_CALLBACK,
  );
  
  $items['models/reviews'] = array(
    'title' => 'Reviews',
    'description' => "",
    'page callback' => 'modelreview_queues_page',
    //'page arguments' => array(array(1, 4)),
    'access callback' => 'modelreview_access_content',
    'access arguments' => array(array('edit review', 'manage review', 'review model')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  // Info for the general public about model reviews
  $items['models/reviews/info'] = array(
    'title' => 'What Is A Model Review?',
    'description' => "",
    'page callback' => 'modelreview_info_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function modelreview_permission() {
  return array(
    'review model' => array(
      'title' => t('Review Models: Reviewers'),
      'description' => t('Perform review on models. Users with this permission can be assigned as a Reviewer.'),
    ),
    'edit review' => array(
      'title' => t('Edit Review Cases: Review Editors'),
      'description' => t('Process and edit review cases.'),
    ),
    'manage review' => array(
      'title' => t('Manage Review Cases: Managing Editors'),
      'description' => t('Manage editors and review cases.'),
    ),
    'administer model reviews' => array(
      'title' => t('Administer Model Review Settings'),
    ),
  );
}

/**
 * Implementation of custom access callback function
 */
function modelreview_access_content($perms) {
  global $user;
  $modelnid = arg(1);
  $author_access = FALSE;
  $editor_access = FALSE;
  $reviewer_access = FALSE;

  // if author access requested
  if (in_array('edit own model', $perms)) {
    $sql = "SELECT nid, uid FROM {node} WHERE type = 'model' AND node.nid = :nid";
    $result = db_query($sql, array(':nid' => $modelnid));
    $row = $result->fetchObject();

    $author = $row->uid;
    $author_access = (($user->uid == 1) || (user_access('edit own model') && $user->uid == $author));
  }

  // if editor access requested
  if (in_array('edit review', $perms)) {
    $editor_access = (($user->uid == 1) || user_access('edit review'));
  }

  // if reviewer access requested
  // if reviewer hasn't been assigned yet, deny access
  if (in_array('review model', $perms)) {
    $modelnid = arg(1);
    $sql = "SELECT COUNT(*) FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mr.sid = mra.sid WHERE mr.model_nid = :nid AND mra.statusid > 10;";
    $result = db_query($sql, array(':nid' => $modelnid));
    $review_count = $result->fetchField();

    $reviewer_access = ($review_count > 0) && (($user->uid == 1) || user_access('review model'));
  }

  return ($author_access || $editor_access || $reviewer_access);
}

function modelreview_request_page() {
  return theme('request_review_page', array( 
        'model_nid' => arg(1), 
      ));
}

function modelreview_info_page() {
  return theme('info_review_page', array( 
      ));
}

function modelreview_admin() {
  $build = array();
  
  $build['content'] = array(
    'section1' => drupal_get_form('modelreview_admin_message_settings_form'),
  );
  
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

/**
 * Admin settings page
 */
function modelreview_admin_message_settings_form() {
  $form = array();

  $form['reviews_enabled'] = array(
    '#type' => 'fieldset',
    '#title' => t('Model Reviews Status'),
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
  );

  $form['reviews_enabled']['modelreview_system_enabled'] = array(
    '#type' => 'radios', 
    '#title' => t('Enable/Disable Model Reviews'), 
    '#default_value' => variable_get('modelreview_system_enabled', 0), 
    '#options' => array(t('Disabled'), t('Enabled')),
  );

  $form['notifications'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Notifications'),
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
  );

  $form['notifications']['modelreview_emails_enabled'] = array(
    '#type' => 'radios', 
    '#title' => t('Enable/Disable Notifications'), 
    '#default_value' => variable_get('modelreview_emails_enabled', 0), 
    '#options' => array(t('Disabled'), t('Enabled')),
  );


  $form['notification_templates'] = array(
    '#type' => 'fieldset',
    '#title' => t('Notification Templates'),
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );

  $form['notification_templates']['review_requested'] = array(
    '#type' => 'fieldset',
    '#title' => t('Review Requested'),
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );

  $form['notification_templates']['review_requested']['destination'] = array(
    '#type' => 'textfield', 
    '#title' => t('Destination'), 
    '#default_value' => '', 
    '#size' => 32,
    '#maxlength' => 32,
    '#required' => TRUE,
  );

  $form['notification_templates']['review_requested']['destination_type'] = array(
    '#type' => 'radios', 
    '#title' => t('Destination Type'), 
    '#default_value' => 0, 
    '#options' => array(t('Role'), t('User')),
    '#required' => TRUE,
  );

  $form['notification_templates']['review_requested']['subject'] = array(
    '#type' => 'textfield', 
    '#title' => t('Subject'), 
    '#default_value' => '', 
    '#size' => 128,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['notification_templates']['review_requested']['body'] = array(
    '#type' => 'textarea', 
    '#title' => t('Message Body'), 
    '#default_value' => '', 
    '#required' => TRUE,
  );


  $form['notification_templates']['invite_reviewer'] = array(
    '#type' => 'fieldset',
    '#title' => t('Invite Reviewer'),
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );

  $form['notification_templates']['invite_reviewer']['destination'] = array(
    '#type' => 'textfield', 
    '#title' => t('Destination'), 
    '#default_value' => '', 
    '#size' => 32,
    '#maxlength' => 32,
    '#required' => TRUE,
  );

  $form['notification_templates']['invite_reviewer']['destination_type'] = array(
    '#type' => 'radios', 
    '#title' => t('Destination Type'), 
    '#default_value' => 0, 
    '#options' => array(t('Role'), t('User')),
    '#required' => TRUE,
  );

  $form['notification_templates']['invite_reviewer']['subject'] = array(
    '#type' => 'textfield', 
    '#title' => t('Subject'), 
    '#default_value' => '', 
    '#size' => 128,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['notification_templates']['invite_reviewer']['body'] = array(
    '#type' => 'textarea', 
    '#title' => t('Message Body'), 
    '#default_value' => '', 
    '#required' => TRUE,
  );


  $form['notification_templates']['review_declined'] = array(
    '#type' => 'fieldset',
    '#title' => t('Review Declined'),
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
  );

  $form['notification_templates']['review_declined']['destination'] = array(
    '#type' => 'textfield', 
    '#title' => t('Destination'), 
    '#default_value' => '', 
    '#size' => 32,
    '#maxlength' => 32,
    '#required' => TRUE,
  );

  $form['notification_templates']['review_declined']['destination_type'] = array(
    '#type' => 'radios', 
    '#title' => t('Destination Type'), 
    '#default_value' => 0, 
    '#options' => array(t('Role'), t('User')),
    '#required' => TRUE,
  );

  $form['notification_templates']['review_declined']['subject'] = array(
    '#type' => 'textfield', 
    '#title' => t('Subject'), 
    '#default_value' => '', 
    '#size' => 128,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['notification_templates']['review_declined']['body'] = array(
    '#type' => 'textarea', 
    '#title' => t('Message Body'), 
    '#default_value' => '', 
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implementation of page callback
 *
 * This redirects the user to the default Status tab.
 * 
 */
function modelreview_goto_status() {
  global $user;
  $modelnid = arg(1);

  // Determine who is viewing the Status page and the current Review Status Code
  // Lookup the Model author
  $sql = "SELECT nid, uid FROM {node} WHERE type = 'model' AND node.nid = :nid";
  $result = db_query($sql, array(':nid' => $modelnid));
  $row = $result->fetchObject();
  $author = $row->uid;

  // Lookup Review for Assigned Reviewer
  $sql = "SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mra.statusdate, mra.reviewer "
       . "FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mra.statusid = 20 "
       . "WHERE mr.model_nid = :nid";
  $result = db_query($sql, array(':nid' => $modelnid));
  $row = $result->fetchObject();
  if (isset($row->reviewer))
    $reviewer = $row->reviewer;
  else
    $reviewer = NULL;

  // set mode according to rules:
  // 1. If user owns model being viewed, use Author mode.
  // 2. If user is assigned as model Reviewer, then use Reviewer mode.
  // 3. If user is an Editor, then use Editor mode.
  if ($user->uid == $author) {
    drupal_goto('model/' . $modelnid . '/review/status/author');
  } 
  elseif (user_access('review model') && $user->uid == $reviewer) {
    drupal_goto('model/' . $modelnid . '/review/status/reviewer');
  } 
  elseif (($user->uid == 1) || user_access('edit review')) {
    drupal_goto('model/' . $modelnid . '/review/status/editor');
  } 
  else {
    drupal_set_message(t('You are not authorized to view this model information.'));
    drupal_goto('page/invalid-request');
  }
}

/**
 * Implementation of page callback
 *
 * This is the Review Request Page, which a model author views prior to requesting
 * a review of their model.
 */
function modelreview_request_review() {
  $modelnid = arg(1);

  // check if modelversion has been reviewed yet.
  // if not, then provide info on the process.
  // if so, then redirect to the review status page

  $sql = "SELECT COUNT(*) FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mr.sid = mra.sid WHERE mr.model_nid = :nid AND mra.statusid < 60;";
  $result = db_query($sql, array(':nid' => $modelnid));
  $review_count = $result->fetchField();

  if ($review_count == 0) {
    $content = theme('request_review_page', array( 
        'model_nid' => $modelnid, 
      ));
    return $content; 
  } 
  else {
    drupal_goto('model/' . $modelnid . '/review/status');
  } 
}


/**
 * Implementation of page callback
 *
 * This is the Review Status Page, which displays various summary info about an ongoing model review.
 * The specific information displayed and available actions that can be taken from here depends on
 * who is viewing the page.
 */
function modelreview_status_page() {
  global $user;
  $modelnid = arg(1);

  // Lookup name of assigned reviewer
  // Get most recent assigned and/or accepted reviewer: 20-only or 20 & 25. Ignore previous reviewers who declined
  //     Get last row with status 20, with no corresponding status 23
  $sql = "SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, mra.statusdate, mra.reviewer, "
       . "reviewer_firstname.field_profile2_firstname_value as firstname, reviewer_lastname.field_profile2_lastname_value as lastname "
       . "FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mra.statusid = 20 "
       . "INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid "
       . "LEFT JOIN {users} reviewer ON mra.reviewer = reviewer.uid "
       . "LEFT JOIN {profile} p ON reviewer.uid = p.uid AND p.type = 'main' "
       . "LEFT JOIN field_data_field_profile2_firstname reviewer_firstname ON p.pid = reviewer_firstname.entity_id "
       . "LEFT JOIN field_data_field_profile2_lastname reviewer_lastname ON p.pid = reviewer_lastname.entity_id "
       . "WHERE mr.model_nid = :nid AND mra.reviewer NOT IN "
       . "(SELECT reviewer FROM modelreview mr2 INNER JOIN modelreview_action mra2 ON mr2.rid = mra2.rid AND mra2.statusid = 23 WHERE mr2.model_nid = :nid) ";

  $result = db_query($sql, array(':nid' => $modelnid));
  $row = $result->fetchObject();
  if (isset($row->lastname))
    $reviewer = $row->firstname . ' ' . $row->lastname;
  else
    $reviewer = NULL;

  $usermode = arg(4); // view status page in this mode (Author, Editor, or Reviewer)

  // lookup the current status of the open 'modelreview' record
  $sql = "SELECT mr.rid, mr.sid, mr.model_nid, modelversion_nid, related, mra.statusid, mrad.status, statusdate, reviewer FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mr.sid = mra.sid INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid WHERE mr.model_nid = :nid";
  $result = db_query($sql, array(':nid' => $modelnid));
  $row = $result->fetchObject();

  switch ($usermode) {
    case 'author':
      $content = theme('author_status_page', array( 
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;

    case 'editor':
      $content = theme('editor_status_page', array(
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;

    case 'reviewer':
      $content = theme('reviewer_status_page', array(
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;
  }

  return $content;
}

/**
 * Implementation of page callback
 *
 * This is the Review Status Page, which displays various summary info about an ongoing model review.
 * The specific information displayed and available actions that can be taken from here depends on
 * who is viewing the page.
 */
function modelreview_queues_page() {
  global $user;

  $content = theme('review_queues_page', array(
  ));

  return $content;
}


/**
 * Send a simple email to specified recipient.
 *
 * @param string $message_subject
 * @param string $message_body
 */
function modelreview_send_mail($dest_email, $message_subject, $message_body) {
  $comses_email = 'comses.net@openabm.org';
  
  // These value can remain empty.
  $module = 'modelreview';
  $mail_token = '';
  
  $from = variable_get('system_mail', $comses_email);
  $message = array(
    'id' => $module . '_' . $mail_token,
    'to' => $dest_email,
    'subject' => $message_subject,
    'body' => array($message_body),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
    ),
  );
  $system = drupal_mail_system($module, $mail_token);

  // The format function must be called before calling the mail function. 
  $message = $system->format($message);

  if ($system->mail($message)) {
    watchdog('modelreview', 'Email notification successfully sent for Model Review case.<br />Address: %email<br />Subject: %subject<br />Body: %body', array('%email' => $dest_email, '%subject' => $message_subject, '%body' => $message_body));
  }
  else {
    watchdog('modelreview', 'Email notification failed. Email failed to send for Model Review case.<br />Address: %email<br />Subject: %subject<br />Body: %body', array('%email' => $dest_email, '%subject' => $message_subject, '%body' => $message_body));
  }
}
