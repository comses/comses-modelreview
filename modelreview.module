<?php
/*
    modelreview.module for the CoMSES Computational Model Library
    Copyright (C) 2012. Nathan D. Rollins, Research Network for Computational
        Modeling for the SocioEcological Sciences (CoMSES Net)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/**
 * Implementation of hook_help()
 */
function modelreview_help($path, $arg) {
  if ($path == 'admin/help#modelreview') {
    $txt = 'The CoMSES Model Review module provides an interface for reviewing and certifying models.';
    return '<p>'. t($txt) .'</p>';
  }
}

/**
 * Implementation of hook_init()
 */
function modelreview_init() {
  drupal_add_css(drupal_get_path('module', 'modelreview') .'/includes/modelreview.css');
}

/**
 * Implementation of hook_theme()
 * 
 */
function modelreview_theme() {
  return array(
    'author_status_page' => array(
      'arguments' => array(
        'review' => array(
          'model_nid' => NULL,
          'modelversion_nid' => NULL,
          'rid' => NULL,
          'sid' => NULL,
          'related' => NULL,
          'statusid' => NULL,
          'statusdate' => NULL,
          'status' => NULL,
          'reviewer' => NULL,
        ),
      ),
      'template' => 'author-status-page',
      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
    ),
    'editor_status_page' => array(
      'arguments' => array(
        'review' => array(
          'model_nid' => NULL,
          'modelversion_nid' => NULL,
          'rid' => NULL,
          'sid' => NULL,
          'related' => NULL,
          'statusid' => NULL,
          'statusdate' => NULL,
          'status' => NULL,
          'reviewer' => NULL,
        ),
      ),
      'template' => 'editor-status-page',
      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
    ),
    'reviewer_status_page' => array(
      'arguments' => array(
        'review' => array(
          'model_nid' => NULL,
          'modelversion_nid' => NULL,
          'rid' => NULL,
          'sid' => NULL,
          'related' => NULL,
          'statusid' => NULL,
          'statusdate' => NULL,
          'status' => NULL,
          'reviewer' => NULL,
        ),
      ),
      'template' => 'reviewer-status-page',
      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
    ),
    'review_queues_page' => array(
      'arguments' => array(
        'review' => array(
          'model_nid' => NULL,
          'modelversion_nid' => NULL,
          'rid' => NULL,
          'sid' => NULL,
          'related' => NULL,
          'statusid' => NULL,
          'statusdate' => NULL,
          'status' => NULL,
          'reviewer' => NULL,
        ),
      ),
      'template' => 'review-queues-page',
      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function modelreview_menu() {

  // This is the Edit model tab which redirects to the official edit address.
/*  $items['model/%/version/%/review'] = array(
    'title' => 'Debug: Review Status',
    'description' => "",
    'page callback' => '_modelreview_goto_status',
    'page arguments' => array(array(1)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  ); */

  $items['model/%/version/%/request'] = array(
    'title' => 'Debug: Request Review',
    'description' => "",
    'page callback' => '_modelreview_debug_request',
    'page arguments' => array(array(1)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );

  // Review Status page
  $items['model/%/review/status'] = array(
    'title' => 'Review',
    'description' => "",
    'page callback' => '_modelreview_goto_status',
    'page arguments' => array(array(1)),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['model/%/review/status/author'] = array(
    'title' => 'Author',
    'description' => "",
    'page callback' => '_modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['model/%/review/status/editor'] = array(
    'title' => 'Editor',
    'description' => "",
    'page callback' => '_modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['model/%/review/status/reviewer'] = array(
    'title' => 'Reviewer',
    'description' => "",
    'page callback' => '_modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  ); 


  // Info on model reviews and request page
  $items['model/%/review/info'] = array(
    'title' => 'Request A Model Review',
    'description' => "",
    'page callback' => '_modelreview_request_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['model/%/review/%/step'] = array(
    'title' => 'Review',
    'description' => "",
    'page callback' => '_modelreview_step',
    'page arguments' => array(array(1, 3)),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['models/reviews'] = array(
    'title' => 'Reviews',
    'description' => "",
    'page callback' => '_modelreview_queues_page',
    //'page arguments' => array(array(1, 4)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function modelreview_perm() {
  return array(
    'review model',
    'edit review',
  );
}

/**
 * Implementation of custom access callback function
 */
function _modelreview_access_content($perms) {
  global $user;

  switch (arg(3)) {
    // Model Owner
    case 'info':
    case 1:
    case 5:
      $view_args = array(arg(1)); // The display we are using takes an argument
      $display_id = 'page_6';   // We are accessing the View Model display...
      $model = views_get_view('model'); // ...from the model View
      $model->set_arguments($view_args); // Send Views the arguments it needs
      $model->set_display($display_id);  // and tell it which display we are accessing
      $model->pre_execute(); // run any preprocessing
      $model->execute(); // then execute the view

      // Grant access if the user is the root user, if the user has 'edit any model' access, or
      // has 'edit own model' access AND is the model's owner.
      $access = (($user->uid == 1) || user_access('edit any model') || (user_access('edit own model') && $user->uid == $model->render_field('uid', 0)));
      break;

    // Editor
    case 'assign':
    case 2:
    case 4:
    case 6:
    case 7:
      // is user a Review Editor?
      $access = (($user->uid == 1) || user_access('edit review'));
      break;

    // Reviewer
    case 'update':
    case 3:
      // is user a Reviewer?
      $access = (($user->uid == 1) || user_access('review model'));
      break;
  }

  return $access;
}

function _modelreview_debug_request() {
  $modelnid = arg(1);

  drupal_goto('model/'. $modelnid .'/review/status/author');
}

/**
 * Implementation of page callback
 *
 * This redirects the user to the default Status tab.
 * 
 */
function _modelreview_goto_status() {
  global $user;
  $modelnid = arg(1);

  // Determine who is viewing the Status page and the current Review Status Code
  // Lookup the Model author
  $view_args = array($modelnid);
  $display_id = 'page_6';
  $model = views_get_view('model');
  $model->set_arguments($view_args);
  $model->set_display($display_id);
  $model->pre_execute();
  $model->execute();

  // Lookup Review for Assigned Reviewer
  $sql = "SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, statusdate, reviewer, field_fullname_value as reviewer_name "
        ."FROM modelreview mr INNER JOIN modelreview_action mra ON mr.rid = mra.rid AND mra.statusid = 2 "
        ."INNER JOIN modelreview_actiondesc mrad ON mra.statusid = mrad.statusid "
        ."LEFT JOIN node ON reviewer = node.uid AND node.type = 'profile' LEFT JOIN content_type_profile ctp ON node.vid = ctp.vid "
        ."WHERE mr.model_nid = %d";
  $result = db_query($sql, arg(1));
  $row = db_fetch_object($result);
  $reviewer = $row->reviewer_name;

  // set mode according to rules:
  // 1. If user owns model being viewed, use Author mode.
  // 2. If user is assigned as model Reviewer, then use Reviewer mode.
  // 3. If user is an Editor, then use Editor mode.
  if ($user->uid == $model->render_field('uid', 0)) {
    drupal_goto('model/'. $modelnid .'/review/status/author');
  } elseif (user_access('edit review') && $user->uid == $reviewer) {
    drupal_goto('model/'. $modelnid .'/review/status/reviewer');
  } elseif (($user->uid == 1) || user_access('edit review')) {
    drupal_goto('model/'. $modelnid .'/review/status/editor');
  } else {
    drupal_set_message('317: You are not authorized to view this model information.');
    drupal_goto('page/invalid-request');
  }
}

/**
 * Implementation of page callback
 *
 * This is the Review Request Page, which a model author views prior to requesting
 * a review of their model.
 */
function _modelreview_request_page() {
  $modelnid = arg(1);

  // check if modelversion has been reviewed yet.
  // if not, then provide info on the process.
  // if so, then redirect to the review status page

  $sql = "SELECT COUNT(*) FROM modelreview mr INNER JOIN modelreview_action mra ON mr.rid = mra.rid AND mr.sid = mra.sid WHERE mr.model_nid = %d AND mra.statusid < 6;";
  $result = db_query($sql, $modelnid);
  $review_count = db_result($result);
  //drupal_set_message('review count: '. $review_count);

  if ($review_count == 0) {
    $content = '
<div>
  <p>You may request that this model be reviewed for completeness and Modeling Best-Practices. Models that meet Model Standards will be certified and will display a Certified badge as well as be included on OpenABM&rsquo;s home page as a Featured Model.</p>
  <p>In order for a model to be certified as meeting CoMSES Best-Practices Standards, it must:</p>
  <ol>
    <li>Have well-formatted and commented programming code. This is to ensure other users can understand and replicate the algorithms in your code.</li>
    <li>Be fully documented using the ODD standard. By writing documentation that complies with the ODD, other modelers should be able to replicate your model and its results without having to refer to your programming code.</li>
    <li>Run correctly with the instructions provided with the model. If the model requires special input files or file structures to run, all must be fully explained in the instructions.</li>
  </ol>
  <p>When your model is reviewed, it will be examined to verify it meets all these standards. The reviewer will indicate in the review system whether your model meets these standards. Any elements that require revision will be noted in the comments fields, and if necessary, your model will be flagged for you to revise as needed.</p>
  <p>We urge you to review your model according to these guidelines prior to requesting a review. Once you are confident your model is ready for review, submit your request below.</p>';
    $content .= '<a href="/model/'. $modelnid .'/review/1/step"><h4>I wish to request this model be reviewed for Model Certification:</h4></a>
</div>';

    return $content; 
  } else {
    drupal_goto('model/'. $modelnid .'/review/status/view');
  } 
}

/**
 * Implementation of page callback
 *
 * This is the Review Status Page, which displays various summary info about an ongoing model review.
 * The specific information displayed and available actions that can be taken from here depends on
 * who is viewing the page.
 */
function _modelreview_status_page() {
  global $user;
  $modelnid = arg(1);

  // Determine who is viewing the Status page and the current Review Status Code
  // Lookup the Model author
  $view_args = array($modelnid);
  $display_id = 'page_6';
  $model = views_get_view('model');
  $model->set_arguments($view_args);
  $model->set_display($display_id);
  $model->pre_execute();
  $model->execute();

  // Lookup Review for Assigned Reviewer
  $sql = "SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, statusdate, reviewer, field_fullname_value as reviewer_name "
        ."FROM modelreview mr INNER JOIN modelreview_action mra ON mr.rid = mra.rid AND mra.statusid = 2 "
        ."INNER JOIN modelreview_actiondesc mrad ON mra.statusid = mrad.statusid "
        ."LEFT JOIN node ON reviewer = node.uid AND node.type = 'profile' LEFT JOIN content_type_profile ctp ON node.vid = ctp.vid "
        ."WHERE mr.model_nid = %d";
  $result = db_query($sql, arg(1));
  $row = db_fetch_object($result);
  $reviewer = $row->reviewer_name;

  $usermode = arg(4); // view status page in this mode (Author, Editor, or Reviewer)

  // lookup the current status of the open 'modelreview' record
  $sql = 'SELECT mr.rid, mr.sid, mr.model_nid, modelversion_nid, related, mra.statusid, mrad.status, statusdate, reviewer FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mr.sid = mra.sid INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid WHERE mr.model_nid = %d';
  $result = db_query($sql, $modelnid);
  $row = db_fetch_object($result);
  $status = $row->statusid;


  /* The nature of the screen displayed depends on user role
     If a Reviewer were to request a review for one of their own models, their Model Owner status
     should supercede their Reviewer status. Likewise, an Editor's role should supercede being a Reviewer
     Maybe I should allow the Editor and Reviewer views be displayed simultaneously in that scenario. */

  // Load Review Status info
  $view_args = array($modelnid);
  $display_id = 'pane_5';
  $review = views_get_view('modelreviews');
  $review->set_arguments($view_args);
  $review->set_display($display_id);
  $review->pre_execute();
  $review->execute();


    // Check if user is assigned to case: if not, then invalid page, redirect to model view.

  switch ($usermode) {
    case 'author':
      $content = theme('author_status_page', array( 
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;

    case 'editor':
      $content = theme('editor_status_page', array(
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;

    case 'reviewer':
      $content = theme('reviewer_status_page', array(
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;
  }

  return $content;
}

/**
 * Implementation of page callback
 *
 * This is the Review Status Page, which displays various summary info about an ongoing model review.
 * The specific information displayed and available actions that can be taken from here depends on
 * who is viewing the page.
 */
function _modelreview_queues_page() {
  global $user;

  $content = theme('review_queues_page', array(

  ));

  return $content;


}

function modelreview_review_form() {
  $standards = array(
    0 => t('Does Not Meet Standards'),
    1 => t('Partially Meets Standards'),
    2 => t('Fully Meets Standards'),
  );

  $recommend = array(
    NULL => '',
    0 => t('Do Not Certify (Deny)'),
    1 => t('Revise (Return to Author)'),
    2 => t('Certify (Accept)'),
  );

  $sql = 'SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, statusdate, reviewer FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mra.statusid = 2 INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid WHERE mr.model_nid = %d';
  $result = db_query($sql, arg(1));
  $row = db_fetch_object($result);

  $form['model_nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );
  $form['rid'] = array(
    '#type' => 'hidden',
    '#value' => $row->rid,
  );
  $form['reviewer'] = array(
    '#type' => 'hidden',
    '#value' => $row->reviewer,
  );

  $form['code_clean'] = array(
    '#type' => 'select',
    '#title' => t('Is the Code Clean/Well-written?'),
    '#options' => $standards,
  );
  $form['code_commented'] = array(
    '#type' => 'select',
    '#title' => t('Is the Code Well-Commented?'),
    '#options' => $standards,
  );
  $form['code_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Code Notes'),
  );


  $form['model_documented'] = array(
    '#type' => 'select',
    '#title' => t('Is the Model Documented Properly?'),
    '#options' => $standards,
  );
  $form['doc_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Documentation Notes'),
  );

  $form['model_runs'] = array(
    '#type' => 'select',
    '#title' => t('Does the Model Run with the Provided Instructions?'),
    '#options' => $standards,
  );
  $form['run_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments on Running the Model'),
  );

  $form['other_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Other Notes About Model'),
  );

  $form['recommendation'] = array(
    '#type' => 'select',
    '#title' => t('Your Recommendation'),
    '#options' => $recommend,
  );
  $form['editor_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments to the Editor (Private)'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('modelreview_review_form_submit'),
  );

  return $form;
}

function modelreview_review_form_submit($form, &$form_state) {
  global $user;
  $modelnid = $form_state['values']['model_nid'];

  // get the node id for the latest modelversion, using Views
  $view_args = array($modelnid); // The display we are using takes an argument
  $display_id = 'page_1';   // We are accessing the Latest Version display...
  $view = views_get_view('modelversion'); // ...from the modelversion View
  $view->set_arguments($view_args); // Send Views the arguments it needs
  $view->set_display($display_id);  // and tell it which display we are accessing
  $view->pre_execute(); // run any preprocessing
  $view->execute(); // then execute the view

  $modelversion_nid = $view->render_field('nid', 0);

  // Insert new 'modelreview_action' record
  $action_record = array(
    'rid' => $form_state['values']['rid'],
    'modelversion_nid' => $modelversion_nid,
    'reviewer' => $form_state['values']['reviewer'],
    'statusid' => 3,
    'statusdate' => time(),
    'code_clean' => $form_state['values']['code_clean'],
    'code_commented' => $form_state['values']['code_commented'],
    'model_documented' => $form_state['values']['model_documented'],
    'model_runs' => $form_state['values']['model_runs'],
    'code_notes' => $form_state['values']['code_notes'],
    'doc_notes' => $form_state['values']['doc_notes'],
    'other_notes' => $form_state['values']['other_notes'],
    'editor_notes' => $form_state['values']['editor_notes'],
    'recommendation' => $form_state['values']['recommendation'],
  );
  drupal_write_record('modelreview_action', $action_record);

  // now update 'modelreview' record with action sid
  $sql = "SELECT mra.sid FROM {modelreview_action} mra WHERE mra.rid = %d ORDER BY mra.statusdate DESC LIMIT 1;";
  $result = db_query($sql, $form_state['values']['rid']);
  $review_sid = db_result($result);

  $review_record = array(
    'rid' => $form_state['values']['rid'],
    'sid' => $review_sid,
  );
  drupal_write_record('modelreview', $review_record, 'rid');

  drupal_goto('model/'. $modelnid .'/review/status/view'); 
}

function modelreview_assignreviewer_form() {
  $options[NULL] = '';
  $sql = "SELECT u.uid, u.name, ctp.field_fullname_value AS fullname ". 
         "FROM users u INNER JOIN users_roles ur ON u.uid = ur.uid ".
         "INNER JOIN permission p ON ur.rid = p.rid ".
         "LEFT JOIN node nu ON u.uid = nu.uid AND nu.type = 'profile' ".
         "LEFT JOIN content_type_profile ctp ON nu.vid = ctp.vid ".
         "WHERE p.perm like '%%%s%%'";
  $results = db_query($sql, 'review model');
  while ($row = db_fetch_object($results)) {
    $options[$row->uid] = $row->fullname;
  }

  $form['model_nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );

  $form['reviewer'] = array(
    '#type' => 'select',
    '#title' => t('Assign Reviewer'),
    '#options' => $options,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function modelreview_assignreviewer_form_submit($form, &$form_state) {
  global $user;
  $modelnid = $form_state['values']['model_nid'];

  // lookup the rid for the open 'modelreview' record
  $sql = "SELECT mr.rid FROM modelreview mr INNER JOIN modelreview_action mra ON mr.rid = mra.rid AND mr.sid = mra.sid WHERE mr.model_nid = %d;";
  $result = db_query($sql, $modelnid);
  $review_id = db_result($result);

  // get the node id for the latest modelversion, using Views
  $view_args = array($modelnid); // The display we are using takes an argument
  $display_id = 'page_1';   // We are accessing the Latest Version display...
  $view = views_get_view('modelversion'); // ...from the modelversion View
  $view->set_arguments($view_args); // Send Views the arguments it needs
  $view->set_display($display_id);  // and tell it which display we are accessing
  $view->pre_execute(); // run any preprocessing
  $view->execute(); // then execute the view

  $modelversion_nid = $view->render_field('nid', 0);

  // Insert new 'modelreview_action' record
  $action_record = array(
    'rid' => $review_id,
    'modelversion_nid' => $modelversion_nid,
    'reviewer' => $form_state['values']['reviewer'],
    'statusid' => 2,
    'statusdate' => time(),
  );
  drupal_write_record('modelreview_action', $action_record);

  // now update 'modelreview' record with action sid
  $sql = "SELECT mra.sid FROM {modelreview_action} mra WHERE mra.rid = %d ORDER BY mra.statusdate DESC LIMIT 1;";
  $result = db_query($sql, $review_id);
  $review_sid = db_result($result);

  $review_record = array(
    'rid' => $review_id,
    'sid' => $review_sid,
  );
  drupal_write_record('modelreview', $review_record, 'rid');

  drupal_goto('model/'. $modelnid .'/review/status/view'); 

}



function modelreview_editor_process_form() {
  $decision = array(
    NULL => '',
    0 => t('Do Not Certify (Deny)'),
    1 => t('Revise (Return to Author)'),
    2 => t('Certify (Accept)'),
  );


  $form['model_nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );

  $form['decision'] = array(
    '#type' => 'select',
    '#title' => t('Take Action'),
    '#options' => $decision,
  );
  $form['editor_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Instructions to the Model Author'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function modelreview_editor_process_form_submit($form, &$form_state) {
  global $user;
  $modelnid = $form_state['values']['model_nid'];

  // lookup the rid for the 'modelreview' record
  $sql = 'SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, statusdate, reviewer FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mra.statusid = 2 INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid WHERE mr.model_nid = %d';
  $result = db_query($sql, arg(1));
  $row = db_fetch_object($result);
  $review_id = $row->rid;
  $reviewer = $row->reviewer;

  // get the node id for the latest modelversion, using Views
  $view_args = array($modelnid); // The display we are using takes an argument
  $display_id = 'page_1';   // We are accessing the Latest Version display...
  $view = views_get_view('modelversion'); // ...from the modelversion View
  $view->set_arguments($view_args); // Send Views the arguments it needs
  $view->set_display($display_id);  // and tell it which display we are accessing
  $view->pre_execute(); // run any preprocessing
  $view->execute(); // then execute the view

  $modelversion_nid = $view->render_field('nid', 0);


  // we need to lookup the review actions that have been submitted for the editor to review
  // they will be actions that have not been associated ('related') to any editor actions
  $sql = 'SELECT mr.model_nid, mra.rid, mra.sid, mra.related, mra.statusid, mrad.status, statusdate, 
                FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mra.statusid = 3
                INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid WHERE mr.model_nid = %d AND related = NULL';
  $reviews = db_query($sql, $review['model_nid']);
  // after we add our editor action, we will need to update these review actions to point (via 'related') to our new editor action

  // determine the status id that will need to be recorded here.
  switch ($form_state['values']['decision']) {
    case 0:
      $step = 7;
      break;

    case 1:
      $step = 4;
      break;

    case 2:
      $step = 6;
      break;
  }

  // Insert new 'modelreview_action' record
  $action_record = array(
    'rid' => $review_id,
    'modelversion_nid' => $modelversion_nid,
    'reviewer' => $reviewer,
    'statusid' => $step,
    'statusdate' => time(),
    'editor_notes' => $form_state['values']['editor_notes'],
  );
  drupal_write_record('modelreview_action', $action_record);

  // now update 'modelreview' record with action sid
  $sql = "SELECT mra.sid FROM {modelreview_action} mra WHERE mra.rid = %d ORDER BY mra.statusdate DESC LIMIT 1;";
  $result = db_query($sql, $review_id);
  $action_sid = db_result($result);

  $review_record = array(
    'rid' => $review_id,
    'sid' => $action_sid,
  );
  drupal_write_record('modelreview', $review_record, 'rid');

  // and update any related review actions with the sid of the new editor action we just created
  $sql = "UPDATE {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mra.statusid = 3 "
         ."SET related = %d WHERE mr.model_nid = %d AND mra.related IS NULL";
  db_query($sql, $action_sid, $modelnid);

  drupal_goto('model/'. $modelnid .'/review/status/view'); 

}




function _modelreview_step() {
  global $user;
  $modelnid = arg(1);
  $sid = arg(3); // Step ID - review step to be processed

  // verify requested action code, the step is the actual next step in the
  // review process.

  // then use switch logic to direct the requesting user to the correct page.
  switch ($sid) {
    case 1:
      // New Review Requested

      // Verify model does not have an open Review case.
          // "Only one per customer, please." (per model, at one time)
          // Otherwise redirect to Status page with error about an open case already present.
      $sql = "SELECT COUNT(*) FROM modelreview mr INNER JOIN modelreview_action mra ON mr.rid = mra.rid AND mr.sid = mra.sid WHERE mr.model_nid = %d AND mra.statusid < 6;";
      $result = db_query($sql, $nid);
      $review_count = db_result($result);

      if ($review_count > 0) {
        // An open review case already exists
        drupal_set_message("Error: This model already has an open Review in progress.");
        $dest = 'model/'. $modelnid .'/review/status';
      } else {
        // Insert new 'modelreview' record
        $review_record = array(
          'rid' => NULL,
          'sid' => 0,
          'model_nid' => $modelnid,
        );
        drupal_write_record('modelreview', $review_record);

        // now lookup the rid for the new 'modelreview' record
        $sql = "SELECT mr.rid FROM modelreview mr WHERE mr.model_nid = %d ORDER BY mr.rid DESC LIMIT 1;";
        $result = db_query($sql, $modelnid);
        $review_id = db_result($result);
        //drupal_set_message('rid: '. $review_id);
        //watchdog('modelreview', 'rid: @reviewid', array('@reviewid' => $review_id), WATCHDOG_NOTICE);

        // get the node id for the latest modelversion, using Views
        $view_args = array($modelnid); // The display we are using takes an argument
        $display_id = 'page_1';   // We are accessing the Latest Version display...
        $view = views_get_view('modelversion'); // ...from the modelversion View
        $view->set_arguments($view_args); // Send Views the arguments it needs
        $view->set_display($display_id);  // and tell it which display we are accessing
        $view->pre_execute(); // run any preprocessing
        $view->execute(); // then execute the view

        $modelversion_nid = $view->render_field('nid', 0);
        //$modelversion_nid = 2320;
        //drupal_set_message('modelversion_nid: '. $modelversion_nid);

        // Insert new 'modelreview_action' record
        $action_record = array(
          'rid' => $review_id,
          'modelversion_nid' => $modelversion_nid,
          'statusid' => 1,
          'statusdate' => time(),
        );
        drupal_write_record('modelreview_action', $action_record);

        // now update 'modelreview' record with action sid
        $sql = "SELECT mra.sid FROM {modelreview_action} mra WHERE mra.rid = %d ORDER BY mra.statusdate DESC LIMIT 1;";
        $result = db_query($sql, $review_id);
        $review_sid = db_result($result);
        //drupal_set_message('review_sid: '. $review_sid);

        $review_record = array(
          'rid' => $review_id,
          'sid' => $review_sid,
        );
        drupal_write_record('modelreview', $review_record, 'rid');

        $dest = 'model/'. $modelnid .'/review/status/view';
      }
      break;

    case 2:
      // Review assigned to Reviewer

      // Editor views review status page and assigns review to 1 (or more) reviewers.
      // Allow number of assigned reviewers be an admin setting, and status page indicates
      // number of assigned reviewers (x of y Total). 1 reviewer per model will be default.

      

      // This needs to be turned into a Form
      // Reviewer needs a dropdown list to select available Reviewers 
      // (plus count of active reviews assigned to each?)

      // lookup the review_id for the open 'modelreview' record
      $sql = 'SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, statusdate, reviewer FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mra.statusid = 2 INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid WHERE mr.model_nid = %d';
      $result = db_query($sql, $modelnid);
      $row = db_fetch_object($result);
      $review_id = $row->rid;
      $reviewer = $row->reviewer;

      // get the node id for the latest modelversion, using Views
      $view_args = array($modelnid); // The display we are using takes an argument
      $display_id = 'page_1';   // We are accessing the Latest Version display...
      $view = views_get_view('modelversion'); // ...from the modelversion View
      $view->set_arguments($view_args); // Send Views the arguments it needs
      $view->set_display($display_id);  // and tell it which display we are accessing
      $view->pre_execute(); // run any preprocessing
      $view->execute(); // then execute the view

      $modelversion_nid = $view->render_field('nid', 0);

      // Insert new 'modelreview_action' record
      $action_record = array(
        'rid' => $review_id,
        'modelversion_nid' => $modelversion_nid,
        'reviewer' => $reviewer, // this needs to be form field value for the selected Reviewer
        'statusid' => 2,
        'statusdate' => time(),
      );
      drupal_write_record('modelreview_action', $action_record);

      // now update 'modelreview' record with action sid
      $sql = "SELECT mra.sid FROM {modelreview_action} mra WHERE mra.rid = %d ORDER BY mra.statusdate DESC LIMIT 1;";
      $result = db_query($sql, $review_id);
      $review_sid = db_result($result);

      $review_record = array(
        'rid' => $review_id,
        'sid' => $review_sid,
      );
      drupal_write_record('modelreview', $review_record, 'rid');

      // When model is assigned, send notification to assigned reviewer.

      // transfer user to Review Status page
      $dest = 'model/'. $modelnid .'/review/status/view';
      break;

    // case 3:
      // Reviewer submits review form with Action recommendation (Revise, Certify, Deny).

    // case 4:
      // Editor sends model review to Author for Revisions
      //     Probably should verify latest model version is more recent than the version recorded during Review,
      //     So author can't request re-review until model has been updated to a newer version.

    case 5:
      // Changes Completed, Revisions Needed
      
      // lookup the rid for the open 'modelreview' record
      $sql = 'SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, statusdate, reviewer FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mra.statusid = 2 INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid WHERE mr.model_nid = %d';
      $result = db_query($sql, $modelnid);
      $row = db_fetch_object($result);
      $review_id = $row->rid;
      $reviewer = $row->reviewer;

      // get the node id for the latest modelversion, using Views
      $view_args = array($modelnid); // The display we are using takes an argument
      $display_id = 'page_1';   // We are accessing the Latest Version display...
      $view = views_get_view('modelversion'); // ...from the modelversion View
      $view->set_arguments($view_args); // Send Views the arguments it needs
      $view->set_display($display_id);  // and tell it which display we are accessing
      $view->pre_execute(); // run any preprocessing
      $view->execute(); // then execute the view

      $modelversion_nid = $view->render_field('nid', 0);

      // Insert new 'modelreview_action' record
      $action_record = array(
        'rid' => $review_id,
        'modelversion_nid' => $modelversion_nid,
        'reviewer' => $reviewer,
        'statusid' => 5,
        'statusdate' => time(),
      );
      drupal_write_record('modelreview_action', $action_record);

      // now update 'modelreview' record with action sid
      $sql = "SELECT mra.sid FROM {modelreview_action} mra WHERE mra.rid = %d ORDER BY mra.statusdate DESC LIMIT 1;";
      $result = db_query($sql, $review_id);
      $review_sid = db_result($result);

      $review_record = array(
        'rid' => $review_id,
        'sid' => $review_sid,
      );
      drupal_write_record('modelreview', $review_record, 'rid');

      // transfer user to Review form
      $dest = 'model/'. $modelnid .'/review/status/view';
      break;

    // case 6:
      // Review Completed - Model Certified

    // case 7:
      // Review Completed - Model Not Certified
  }

  // Go to Model Review Status
  drupal_goto($dest);
}
