<?php
/*
    modelreview.module for the CoMSES Computational Model Library
    Copyright (C) 2012. Nathan D. Rollins, Research Network for Computational
        Modeling for the SocioEcological Sciences (CoMSES Net)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/**
 * Include the module forms
 */
module_load_include('inc', 'modelreview', 'includes/modelreview.forms');

/**
 * Implementation of hook_help()
 */
function modelreview_help($path, $arg) {
  if ($path == 'admin/help#modelreview') {
    $txt = 'The CoMSES Model Review module provides an interface for reviewing and certifying models.';
    return '<p>'. t($txt) .'</p>';
  }
}

/**
 * Implementation of hook_init()
 *
 */
function modelreview_init() {
  drupal_add_css(drupal_get_path('module', 'modelreview') .'/includes/modelreview.css');
}

/**
 * Implementation of hook_theme()
 * 
 */
function modelreview_theme() {
  return array(
    'author_status_page' => array(
      'arguments' => array(
        'review' => array(
          'model_nid' => NULL,
          'modelversion_nid' => NULL,
          'rid' => NULL,
          'sid' => NULL,
          'related' => NULL,
          'statusid' => NULL,
          'statusdate' => NULL,
          'status' => NULL,
          'reviewer' => NULL,
        ),
      ),
      'template' => 'author-status-page',
      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
    ),
    'editor_status_page' => array(
      'arguments' => array(
        'review' => array(
          'model_nid' => NULL,
          'modelversion_nid' => NULL,
          'rid' => NULL,
          'sid' => NULL,
          'related' => NULL,
          'statusid' => NULL,
          'statusdate' => NULL,
          'status' => NULL,
          'reviewer' => NULL,
        ),
      ),
      'template' => 'editor-status-page',
      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
    ),
    'reviewer_status_page' => array(
      'arguments' => array(
        'review' => array(
          'model_nid' => NULL,
          'modelversion_nid' => NULL,
          'rid' => NULL,
          'sid' => NULL,
          'related' => NULL,
          'statusid' => NULL,
          'statusdate' => NULL,
          'status' => NULL,
          'reviewer' => NULL,
        ),
      ),
      'template' => 'reviewer-status-page',
      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
    ),
    'review_queues_page' => array(
      'arguments' => array(
        'review' => array(
          'model_nid' => NULL,
          'modelversion_nid' => NULL,
          'rid' => NULL,
          'sid' => NULL,
          'related' => NULL,
          'statusid' => NULL,
          'statusdate' => NULL,
          'status' => NULL,
          'reviewer' => NULL,
        ),
      ),
      'template' => 'review-queues-page',
      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function modelreview_menu() {

  // This is the Edit model tab which redirects to the official edit address.
/*  $items['model/%/version/%/review'] = array(
    'title' => 'Debug: Review Status',
    'description' => "",
    'page callback' => '_modelreview_goto_status',
    'page arguments' => array(array(1)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  ); */

  $items['model/%/version/%/request'] = array(
    'title' => 'Debug: Request Review',
    'description' => "",
    'page callback' => '_modelreview_debug_request',
    'page arguments' => array(array(1)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );

  // Review Test Message page
  $items['model/%/review/test'] = array(
    'page callback' => 'modelreview_test_message',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Review Status page
  $items['model/%/review/status'] = array(
    'title' => 'Review',
    'description' => "",
    'page callback' => '_modelreview_goto_status',
    'page arguments' => array(array(1)),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['model/%/review/status/author'] = array(
    'title' => 'Author',
    'description' => "",
    'page callback' => '_modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['model/%/review/status/editor'] = array(
    'title' => 'Editor',
    'description' => "",
    'page callback' => '_modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['model/%/review/status/reviewer'] = array(
    'title' => 'Reviewer',
    'description' => "",
    'page callback' => '_modelreview_status_page',
    'page arguments' => array(array(1, 4)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  ); 


  // Info on model reviews and request page
  $items['model/%/review/info'] = array(
    'title' => 'Request A Model Review',
    'description' => "",
    'page callback' => '_modelreview_request_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['models/reviews'] = array(
    'title' => 'Reviews',
    'description' => "",
    'page callback' => '_modelreview_queues_page',
    //'page arguments' => array(array(1, 4)),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function modelreview_perm() {
  return array(
    'review model',
    'edit review',
  );
}

/**
 * Implementation of custom access callback function
 */
function _modelreview_access_content($perms) {
  global $user;

  switch (arg(3)) {
    // Model Owner
    case 'info':
    case 1:
    case 5:
      $view_args = array(arg(1)); // The display we are using takes an argument
      $display_id = 'page_6';   // We are accessing the View Model display...
      $model = views_get_view('model'); // ...from the model View
      $model->set_arguments($view_args); // Send Views the arguments it needs
      $model->set_display($display_id);  // and tell it which display we are accessing
      $model->pre_execute(); // run any preprocessing
      $model->execute(); // then execute the view

      // Grant access if the user is the root user, if the user has 'edit any model' access, or
      // has 'edit own model' access AND is the model's owner.
      $access = (($user->uid == 1) || user_access('edit any model') || (user_access('edit own model') && $user->uid == $model->render_field('uid', 0)));
      break;

    // Editor
    case 'assign':
    case 2:
    case 4:
    case 6:
    case 7:
      // is user a Review Editor?
      $access = (($user->uid == 1) || user_access('edit review'));
      break;

    // Reviewer
    case 'update':
    case 3:
      // is user a Reviewer?
      $access = (($user->uid == 1) || user_access('review model'));
      break;
  }

  return $access;
}

function _modelreview_debug_request() {
  $modelnid = arg(1);

  drupal_goto('model/'. $modelnid .'/review/status/author');
}

/**
 * Implementation of page callback
 *
 * This redirects the user to the default Status tab.
 * 
 */
function _modelreview_goto_status() {
  global $user;
  $modelnid = arg(1);

  // Determine who is viewing the Status page and the current Review Status Code
  // Lookup the Model author
  $view_args = array($modelnid);
  $display_id = 'page_6';
  $model = views_get_view('model');
  $model->set_arguments($view_args);
  $model->set_display($display_id);
  $model->pre_execute();
  $model->execute();

  // Lookup Review for Assigned Reviewer
  $sql = "SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, statusdate, reviewer, field_fullname_value as reviewer_name "
        ."FROM modelreview mr INNER JOIN modelreview_action mra ON mr.rid = mra.rid AND mra.statusid = 2 "
        ."INNER JOIN modelreview_actiondesc mrad ON mra.statusid = mrad.statusid "
        ."LEFT JOIN node ON reviewer = node.uid AND node.type = 'profile' LEFT JOIN content_type_profile ctp ON node.vid = ctp.vid "
        ."WHERE mr.model_nid = %d";
  $result = db_query($sql, arg(1));
  $row = db_fetch_object($result);
  $reviewer = $row->reviewer_name;

  // set mode according to rules:
  // 1. If user owns model being viewed, use Author mode.
  // 2. If user is assigned as model Reviewer, then use Reviewer mode.
  // 3. If user is an Editor, then use Editor mode.
  if ($user->uid == $model->render_field('uid', 0)) {
    drupal_goto('model/'. $modelnid .'/review/status/author');
  } elseif (user_access('edit review') && $user->uid == $reviewer) {
    drupal_goto('model/'. $modelnid .'/review/status/reviewer');
  } elseif (($user->uid == 1) || user_access('edit review')) {
    drupal_goto('model/'. $modelnid .'/review/status/editor');
  } else {
    drupal_set_message('317: You are not authorized to view this model information.');
    drupal_goto('page/invalid-request');
  }
}

/**
 * Implementation of page callback
 *
 * This is the Review Request Page, which a model author views prior to requesting
 * a review of their model.
 */
function _modelreview_request_page() {
  $modelnid = arg(1);

  // check if modelversion has been reviewed yet.
  // if not, then provide info on the process.
  // if so, then redirect to the review status page

  $sql = "SELECT COUNT(*) FROM modelreview mr INNER JOIN modelreview_action mra ON mr.rid = mra.rid AND mr.sid = mra.sid WHERE mr.model_nid = %d AND mra.statusid < 6;";
  $result = db_query($sql, $modelnid);
  $review_count = db_result($result);
  //drupal_set_message('review count: '. $review_count);

  if ($review_count == 0) {
    $content = '
<div>
  <p>You may request that this model be reviewed for completeness and Modeling Best-Practices. Models that meet Model Standards will be certified and will display a Certified badge as well as be included on OpenABM&rsquo;s home page as a Featured Model.</p>
  <p>In order for a model to be certified as meeting CoMSES Best-Practices Standards, it must:</p>
  <ol>
    <li>Have well-formatted and commented programming code. This is to ensure other users can understand and replicate the algorithms in your code.</li>
    <li>Be fully documented using the ODD standard. By writing documentation that complies with the ODD, other modelers should be able to replicate your model and its results without having to refer to your programming code.</li>
    <li>Run correctly with the instructions provided with the model. If the model requires special input files or file structures to run, all must be fully explained in the instructions.</li>
  </ol>
  <p>When your model is reviewed, it will be examined to verify it meets all these standards. The reviewer will indicate in the review system whether your model meets these standards. Any elements that require revision will be noted in the comments fields, and if necessary, your model will be flagged for you to revise as needed.</p>
  <p>We urge you to review your model according to these guidelines prior to requesting a review. Once you are confident your model is ready for review, submit your request below.</p>';


    $content .= drupal_get_form(modelreview_requestreview_form);

    return $content; 
  } else {
    drupal_goto('model/'. $modelnid .'/review/status');
  } 
}


/**
 * Implementation of page callback
 *
 * This is the Review Status Page, which displays various summary info about an ongoing model review.
 * The specific information displayed and available actions that can be taken from here depends on
 * who is viewing the page.
 */
function _modelreview_status_page() {
  global $user;
  $modelnid = arg(1);

  // Determine who is viewing the Status page and the current Review Status Code
  // Lookup the Model author
  $view_args = array($modelnid);
  $display_id = 'page_6';
  $model = views_get_view('model');
  $model->set_arguments($view_args);
  $model->set_display($display_id);
  $model->pre_execute();
  $model->execute();

  // Lookup Review for Assigned Reviewer
  $sql = "SELECT mr.model_nid, mra.rid, mra.sid, mra.statusid, mrad.status, statusdate, reviewer, field_fullname_value as reviewer_name "
        ."FROM modelreview mr INNER JOIN modelreview_action mra ON mr.rid = mra.rid AND mra.statusid = 2 "
        ."INNER JOIN modelreview_actiondesc mrad ON mra.statusid = mrad.statusid "
        ."LEFT JOIN node ON reviewer = node.uid AND node.type = 'profile' LEFT JOIN content_type_profile ctp ON node.vid = ctp.vid "
        ."WHERE mr.model_nid = %d";
  $result = db_query($sql, arg(1));
  $row = db_fetch_object($result);
  $reviewer = $row->reviewer_name;

  $usermode = arg(4); // view status page in this mode (Author, Editor, or Reviewer)

  // lookup the current status of the open 'modelreview' record
  $sql = 'SELECT mr.rid, mr.sid, mr.model_nid, modelversion_nid, related, mra.statusid, mrad.status, statusdate, reviewer FROM {modelreview} mr INNER JOIN {modelreview_action} mra ON mr.rid = mra.rid AND mr.sid = mra.sid INNER JOIN {modelreview_actiondesc} mrad ON mra.statusid = mrad.statusid WHERE mr.model_nid = %d';
  $result = db_query($sql, $modelnid);
  $row = db_fetch_object($result);
  $status = $row->statusid;


  /* The nature of the screen displayed depends on user role
     If a Reviewer were to request a review for one of their own models, their Model Owner status
     should supercede their Reviewer status. Likewise, an Editor's role should supercede being a Reviewer
     Maybe I should allow the Editor and Reviewer views be displayed simultaneously in that scenario. */

  // Load Review Status info
  $view_args = array($modelnid);
  $display_id = 'pane_5';
  $review = views_get_view('modelreviews');
  $review->set_arguments($view_args);
  $review->set_display($display_id);
  $review->pre_execute();
  $review->execute();

  switch ($usermode) {
    case 'author':
      $content = theme('author_status_page', array( 
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;

    case 'editor':
      $content = theme('editor_status_page', array(
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;

    case 'reviewer':
      $content = theme('reviewer_status_page', array(
        'model_nid' => $modelnid, 
        'modelversion_nid' => $row->modelversion_nid, 
        'rid' => $row->rid, 
        'sid' => $row->sid, 
        'related' => $row->related, 
        'statusid' => $row->statusid, 
        'statusdate' => $row->statusdate, 
        'status' => $row->status, 
        'reviewer' => $reviewer,
      ));
      break;
  }

  return $content;
}

/**
 * Implementation of page callback
 *
 * This is the Review Status Page, which displays various summary info about an ongoing model review.
 * The specific information displayed and available actions that can be taken from here depends on
 * who is viewing the page.
 */
function _modelreview_queues_page() {
  global $user;

  $content = theme('review_queues_page', array(
  ));

  return $content;
}
