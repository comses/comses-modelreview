<?php
/*
    modelreview.module for the CoMSES Computational Model Library
    Copyright (C) 2012. Nathan D. Rollins, Research Network for Computational
        Modeling for the SocioEcological Sciences (CoMSES Net)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/**
 * Implementation of hook_help()
 */
function modelreview_help($path, $arg) {
  if ($path == 'admin/help#modelreview') {
    $txt = 'The CoMSES Model Review module provides an interface for reviewing and certifying models.';
    return '<p>'. t($txt) .'</p>';
  }
}

/**
 * Implementation of hook_init()
 */
function modelreview_init() {
//  drupal_add_css(drupal_get_path('module', 'modelreview') .'/includes/modelreview.css');
//  drupal_add_js(drupal_get_path('module', 'modelreview') .'/includes/modelreview.js');
}

/**
 * Implementation of hook_views_api().
 *
 * This tells drupal that there is Views integration file named 
 * modelreview.views.inc 
 */
function modelreview_views_api() {
  // Note that you can include 'path' in this array so that your views.inc 
  // file can be stored in a different location.
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'modelreview') .'/includes',
  );
}

/**
 * Implementation of hook_preprocess_panels_pane()
 *
 * Used to override Panels templates
 */
#function modelreview_preprocess_panels_pane(&$vars) {
#  if ($vars['pane']->type == 'modelreview_panel_pane_2') {
#    $vars['template_files'][] = 'modelreview-panels-pane-2';
#  }
#}


/**
 * Implementation of hook_theme()
 * 
 * Information on this functionality is documented in Advanced Help -> Views ->
 * Views API -> Using default views in your module
 */
function modelreview_theme($existing) {
  return array(
#    'views_view_fields__modelreviews__page_1' => array(
#      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
#      'template' => 'views-view-fields--modelreviews--page-1',
#      'original hook' => 'views_view_fields',
#      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
#    ),
#    'views_view_fields__modelreviews__page_2' => array(
#      'arguments' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
#      'template' => 'views-view-fields--modelreviews--page-2',
#      'original hook' => 'views_view_fields',
#      'path' => drupal_get_path('module', 'modelreview') .'/tpl',
#    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function modelreview_menu() {

  /*$items['model/%/review/'] = array(
    'title' => 'Review',
    'description' => "",
    'page callback' => '_modelreview_step',
    'page arguments' => array(array(1)),
    'access callback' => 'model_edit_access',
    'access arguments' => array('edit', array(1), 'edit own model'),
    'type' => MENU_CALLBACK,
  );*/


  // Review Status page
  $items['model/%/review/status'] = array(
    'title' => 'Model Review Status',
    'description' => "",
    'page callback' => '_modelreview_status_page',
    //'page arguments' => array('modelreview_request_form', array(1)),
    'access callback' => '_modelreview_access_content',
    'access arguments' => array('edit own model'),
    'type' => MENU_CALLBACK,
  );


  // Info on model reviews and request page
  $items['model/%/review/info'] = array(
    'title' => 'Request A Model Review',
    'description' => "",
    'page callback' => '_modelreview_request_page',
    //'page arguments' => array('modelreview_request_form', array(1)),
    'access callback' => '_modelreview_access_content',
    'access arguments' => array('edit own model'),
    'type' => MENU_CALLBACK,
  );

  $items['model/%/review/assign'] = array(
    'title' => 'Assign Reviewer',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_modelreview_assignreviewer_form'),
    'access callback' => '_modelreview_access_content',
    'access arguments' => array('edit review'),
    'type' => MENU_CALLBACK,
  );

  $items['model/%/review/update'] = array(
    'title' => 'Perform Review',
    'description' => "",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_modelreview_review_form'),
    'access callback' => '_modelreview_access_content',
    'access arguments' => array('review model'),
    'type' => MENU_CALLBACK,
  );

  $items['model/%/review/%/step'] = array(
    'title' => 'Review',
    'description' => "",
    'page callback' => '_modelreview_step',
    'page arguments' => array(array(1)),
    'access callback' => '_modelreview_access_content',
    'access arguments' => array('review model', 'edit own model'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function modelreview_perm() {
  return array(
    'review model',
    'edit review',
  );
}

/**
 * Implementation of custom access callback function
 */
function _modelreview_access_content($perms) {
  global $user;

  switch (arg(3)) {
    // Model Owner
    case 'info':
    case 1:
    case 5:
      $view_args = array(arg(1)); // The display we are using takes an argument
      $display_id = 'page_6';   // We are accessing the View Model display...
      $model = views_get_view('model'); // ...from the model View
      $model->set_arguments($view_args); // Send Views the arguments it needs
      $model->set_display($display_id);  // and tell it which display we are accessing
      $model->pre_execute(); // run any preprocessing
      $model->execute(); // then execute the view

      // Grant access if the user is the root user, if the user has 'edit any model' access, or
      // has 'edit own model' access AND is the model's owner.
      $access = (($user->uid == 1) || user_access('edit any model') || (user_access('edit own model') && $user->uid == $model->render_field('uid', 0)));
      break;

    // Editor
    case 'assign':
    case 2:
    case 4:
    case 6:
    case 7:
      // is user a Review Editor?
      $access = (($user->uid == 1) || user_access('edit review'));
      break;

    // Reviewer
    case 'update':
    case 3:
      // is user a Reviewer?
      $access = (($user->uid == 1) || user_access('review model'));
      break;
  }

  return $access;
}


/**
 * Implementation of page callback
 *
 * This is the Review Request Page, which a model author views prior to requesting
 * a review of their model.
 */
function _modelreview_request_page() {
  $nid = arg(1);

  // check if modelversion has been reviewed yet.
  // if not, then provide info on the process.
  // if so, then redirect to the review status page

  $sql = "SELECT COUNT(*) FROM modelreview mr INNER JOIN modelreview_action mra ON mr.review_id = mra.review_id AND mr.review_sid = mra.review_sid WHERE mr.model_nid = %d AND mra.status < 5;";
  $result = db_query($sql, $nid);
  $review_count = db_result($result);
  //drupal_set_message('review count: '. $review_count);

  if ($review_count == 0) {
    $content = '
<div>
  <p>You may request that this model be reviewed for completeness and Modeling Best-Practices. Models that meet Model Standards will be certified and will display a Certified badge as well as be included on OpenABM&rsquo;s home page as a Featured Model.</p>
  <p>In order for a model to be certified as meeting CoMSES Best-Practices Standards, it must:</p>
  <ol>
    <li>Have well-formatted and commented programming code. This is to ensure other users can understand and replicate the algorithms in your code.</li>
    <li>Be fully documented using the ODD standard. By writing documentation that complies with the ODD, other modelers should be able to replicate your model and its results without having to refer to your programming code.</li>
    <li>Run correctly with the instructions provided with the model. If the model requires special input files or file structures to run, all must be fully explained in the instructions.</li>
  </ol>
  <p>When your model is reviewed, it will be examined to verify it meets all these standards. The reviewer will indicate in the review system whether your model meets these standards. Any elements that require revision will be noted in the comments fields, and if necessary, your model will be flagged for you to revise as needed.</p>
  <p>We urge you to review your model according to these guidelines prior to requesting a review. Once you are confident your model is ready for review, submit your request below.</p>';
    $content .= '<a href="/model/'. $nid .'/review/1/step"><h4>I wish to request this model be reviewed for Model Certification:</h4></a>
</div>';

    return $content; 
  } else {
    drupal_goto('model/'. $nid .'/review/status');
  } 
}

/**
 * Implementation of page callback
 *
 * This is the Review Status Page, which displays various summary info about an ongoing model review.
 * The specific information displayed and available actions that can be taken from here depends on
 * who is viewing the page.
 */
function _modelreview_status_page() {
  global $user;
  $nid = arg(1);

  // Determine who is viewing the Status page and the current Review Status Code
  // Lookup the Model author
  $view_args = array(arg(1));
  $display_id = 'page_6';
  $model = views_get_view('model');
  $model->set_arguments($view_args);
  $model->set_display($display_id);
  $model->pre_execute();
  $model->execute();

  // Boolean: TRUE when current user is model author and has permission to edit own model, OR when current user is root account
  $is_model_author = (($user->uid == 1) || (user_access('edit own model') && $user->uid == $model->render_field('uid', 0)));
  $is_editor = user_access('edit review');
  $is_reviewer = user_access('review model');


  // lookup the current status of the open 'modelreview' record
  $sql = 'SELECT mr.review_id, mr.review_sid, mr.model_nid, modelversion_nid, mra.status, mrad.description, statusdate, reviewer FROM `modelreview` mr INNER JOIN `modelreview_action` mra ON mr.review_id = mra.review_id AND mr.review_sid = mra.review_sid INNER JOIN modelreview_actiondesc mrad ON mra.status = mrad.status WHERE mr.model_nid = %d';
  $result = db_query($sql, $modelnid);
  $row = db_fetch_object($result);
  $status = $row->status;


  /* The nature of the screen displayed depends on user role
     If a Reviewer were to request a review for one of their own models, their Model Owner status
     should supercede their Reviewer status. Likewise, an Editor's role should supercede being a Reviewer
     Maybe I should allow the Editor and Reviewer views be displayed simultaneously in that scenario. */

  // Load Review Status info
  $view_args = array(arg(1));
  $display_id = 'pane_5';
  $review = views_get_view('modelreviews');
  $review->set_arguments($view_args);
  $review->set_display($display_id);
  $review->pre_execute();
  $review->execute();


  if ($is_model_author) {
    // When a Model Author views the status screen:
    if ($status == NULL) {
      // No request: Go to info page
      drupal_goto('model/'. $modelnid .'/review/info'); 
    }
    switch ($status) {
      case 1:
        // Status 1 (Requested): Show model status
        $content = '<h3>'. $model->render_field('title', 0) .'</h3>';
        $content .= '<div>Current Review Status: '. $row->description .'</div>';
        $content .= '<div>Date of Last Review: '. $row->statusdate .'</div>';

        drupal_set_title('Model Review Status');
        return $content;
        break;

      case 2:
        // Status 2 (Assigned): Show model status
        $content = '<h3>'. $model->render_field('title', 0) .'</h3>';
        $content .= '<div>Current Review Status: '. $row->description .'</div>';
        $content .= '<div>Date of Last Review: '. $row->statusdate .'</div>';

        drupal_set_title('Model Review Status');
        return $content;
        break;

      case 3:
        // Status 3 (Review Completed): Show model status
        $content = '<h3>'. $model->render_field('title', 0) .'</h3>';
        $content .= '<div>Current Review Status: '. $row->description .'</div>';
        $content .= '<div>Date of Last Review: '. $row->statusdate .'</div>';

        drupal_set_title('Model Review Status');
        return $content;
        break;

      case 4:
        // Status 4 (Revision): Show review comments and instructions, button to request a re-review
        //     Probably should verify latest model version is more recent than the version recorded during Review,
        //     So author can't request re-review until model has been updated to a newer version.
        break;

      case 5:
        // Status 5 (Re-review): Show model status
        $content = '<h3>'. $model->render_field('title', 0) .'</h3>';
        $content .= '<div>Current Review Status: '. $row->description .'</div>';
        $content .= '<div>Date of Last Review: '. $row->statusdate .'</div>';

        drupal_set_title('Model Review Status');
        return $content;
        break;

      case 6:
        // Status 6 (Close - Certified): Show Certification info
        $content = '<h3>'. $model->render_field('title', 0) .'</h3>';
        $content .= '<div>Current Review Status: '. $row->description .'</div>';
        $content .= '<div>Date of Last Review: '. $row->statusdate .'</div>';

        drupal_set_title('Model Review Status');
        return $content;
        break;

      case 7:
        // Status 7 (Close - Denied): Show Denial information
        $content = '<h3>'. $model->render_field('title', 0) .'</h3>';
        $content .= '<div>Current Review Status: '. $row->description .'</div>';
        $content .= '<div>Date of Last Review: '. $row->statusdate .'</div>';

        drupal_set_title('Model Review Status');
        return $content;
        break;
    }
    
  } elseif ($is_editor) {
    // When a Review Editor views the status screen:
    // No review requested: invalid page
    // Status 1 (Requested): Assign Case to Reviewer
    // Status 2 (Assigned): Show model status and who is assigned as Reviewer
    // Status 3 (Review Completed): Review comments and recommendation, process case (Revise, Close)
    // Status 4 (Revision): Show model status & history
    // Status 5 (Re-Review): Show model status & history
    // Status 6 (Close - Certified): Show model status & history
    // Status 7 (Close - Denied): Show model status & history

  } elseif ($is_reviewer) {
    // When a Reviewer views the status screen:
    // Check if user is assigned to case: if not, then invalid page, redirect to model view.
    // No review requested: invalid page
    // Status 1: invalid page
    // Status 2: Show model status info, button: Begin Review
    // Status 3-7: Thank you for your service

  }
}

function _modelreview_status_page_submit($form, &$form_state) {
}

function _modelreview_review_form() {
  $standards = array(
    'fully_meets' => t('Fully Meets'),
    'partial_meets' => t('Partially Meets'),
    'not_meet' => t('Does Not Meet'),
  );

  $form['model_nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );

  $form['view_model'] = array(
    '#type' => 'item',
    '#title' => t('View the Model'),
    '#value' => '<a href="'. url('model/'. arg(1)) .'" target="_blank">Click to view model</a>',
  );


  $form['code_clean'] = array(
    '#type' => 'select',
    '#title' => t('Is the Code Clean/Well-written?'),
    'options' => $standards,
  );
  $form['code_commented'] = array(
    '#type' => 'select',
    '#title' => t('Is the Code Well-Commented?'),
    'options' => $standards,
  );
  $form['code_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Code Notes'),
  );


  $form['model_documented'] = array(
    '#type' => 'select',
    '#title' => t('Is the Model Documented Properly?'),
    'options' => $standards,
  );
  $form['doc_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Documentation Notes'),
  );

  $form['model_runs'] = array(
    '#type' => 'select',
    '#title' => t('Does the Model Run with the Provided Instructions?'),
    'options' => $standards,
  );
  $form['run_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Running Notes'),
  );

  $form['other_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Other Notes'),
  );

  $form['recommendation'] = array(
    '#type' => 'select',
    '#title' => t('Other Notes'),
    'options' => $standards,
  );
  $form['editor_notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments to the Editor (Private)'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('_modelreview_review_form_submit'),
  );

  return $form;
}

function _modelreview_review_form_submit_revise($form, &$form_state) {
  // save new modelreview_action with status 3
  global $user;
  $modelnid = $form_state['values']['model_nid'];

  // lookup the review_id for the open 'modelreview' record
  $sql = "SELECT mr.review_id FROM modelreview mr INNER JOIN modelreview_action mra ON mr.review_id = mra.review_id AND mr.review_sid = mra.review_sid WHERE mr.model_nid = %d;";
  $result = db_query($sql, $modelnid);
  $review_id = db_result($result);

  // get the node id for the latest modelversion, using Views
  $view_args = array($modelnid); // The display we are using takes an argument
  $display_id = 'page_1';   // We are accessing the Latest Version display...
  $view = views_get_view('modelversion'); // ...from the modelversion View
  $view->set_arguments($view_args); // Send Views the arguments it needs
  $view->set_display($display_id);  // and tell it which display we are accessing
  $view->pre_execute(); // run any preprocessing
  $view->execute(); // then execute the view

  $modelversion_nid = $view->render_field('nid', 0);

  // Insert new 'modelreview_action' record
  $action_record = array(
    'review_id' => $review_id,
    'modelversion_nid' => $modelversion_nid,
    'reviewer' => $user->uid,
    'status' => 3,
    'statusdate' => time(),
    'code_clean' => $form_state['values']['code_clean'],
    'code_commented' => $form_state['values']['code_commented'],
    'model_documented' => $form_state['values']['model_documented'],
    'model_runs' => $form_state['values']['model_runs'],
    'code_notes' => $form_state['values']['code_notes'],
    'doc_notes' => $form_state['values']['doc_notes'],
    'other_notes' => $form_state['values']['other_notes'],
  );
  drupal_write_record('modelreview_action', $action_record);

  // now update 'modelreview' record with action sid
  $sql = "SELECT mra.review_sid FROM {modelreview_action} mra WHERE mra.review_id = %d ORDER BY mra.statusdate DESC LIMIT 1;";
  $result = db_query($sql, $review_id);
  $review_sid = db_result($result);

  $review_record = array(
    'review_id' => $review_id,
    'review_sid' => $review_sid,
  );
  drupal_write_record('modelreview', $review_record, 'review_id');

  drupal_goto('model/'. $modelnid .'/review/status'); 
}

function _modelreview_assignreviewer_form() {
  $form['reviewer'] = array(
    '#type' => 'select',
    '#title' => t('Assign Reviewer'),
    'options' => $reviewers,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function _modelreview_step() {
  global $user;
  $modelnid = arg(1);
  $sid = arg(3); // Step ID - review step to be processed

  // verify requested action code, the step is the actual next step in the
  // review process.

  // then use switch logic to direct the requesting user to the correct page.
  switch ($sid) {
    case 1:
      // New Review Requested

      // Verify model does not have an open Review case.
          // "Only one per customer, please." (per model, at one time)
          // Otherwise redirect to Status page with error about an open case already present.
      $sql = "SELECT COUNT(*) FROM modelreview mr INNER JOIN modelreview_action mra ON mr.review_id = mra.review_id AND mr.review_sid = mra.review_sid WHERE mr.model_nid = %d AND mra.status < 5;";
      $result = db_query($sql, $nid);
      $review_count = db_result($result);

      if ($review_count > 0) {
        // An open review case already exists
        drupal_set_message("Error: This model already has an open Review in progress.");
        $dest = 'model/'. $modelnid .'/review/status';
      } else {
        // Insert new 'modelreview' record
        $review_record = array(
          'review_id' => NULL,
          'review_sid' => 0,
          'model_nid' => $modelnid,
        );
        drupal_write_record('modelreview', $review_record);

        // now lookup the review_id for the new 'modelreview' record
        $sql = "SELECT mr.review_id FROM modelreview mr WHERE mr.model_nid = %d ORDER BY mr.review_id DESC LIMIT 1;";
        $result = db_query($sql, $modelnid);
        $review_id = db_result($result);
        //drupal_set_message('review_id: '. $review_id);
        //watchdog('modelreview', 'review_id: @reviewid', array('@reviewid' => $review_id), WATCHDOG_NOTICE);

        // get the node id for the latest modelversion, using Views
        $view_args = array($modelnid); // The display we are using takes an argument
        $display_id = 'page_1';   // We are accessing the Latest Version display...
        $view = views_get_view('modelversion'); // ...from the modelversion View
        $view->set_arguments($view_args); // Send Views the arguments it needs
        $view->set_display($display_id);  // and tell it which display we are accessing
        $view->pre_execute(); // run any preprocessing
        $view->execute(); // then execute the view

        $modelversion_nid = $view->render_field('nid', 0);
        //$modelversion_nid = 2320;
        //drupal_set_message('modelversion_nid: '. $modelversion_nid);

        // Insert new 'modelreview_action' record
        $action_record = array(
          'review_id' => $review_id,
          'modelversion_nid' => $modelversion_nid,
          'status' => 1,
          'statusdate' => time(),
        );
        drupal_write_record('modelreview_action', $action_record);

        // now update 'modelreview' record with action sid
        $sql = "SELECT mra.review_sid FROM {modelreview_action} mra WHERE mra.review_id = %d ORDER BY mra.statusdate DESC LIMIT 1;";
        $result = db_query($sql, $review_id);
        $review_sid = db_result($result);
        //drupal_set_message('review_sid: '. $review_sid);

        $review_record = array(
          'review_id' => $review_id,
          'review_sid' => $review_sid,
        );
        drupal_write_record('modelreview', $review_record, 'review_id');

        $dest = 'model/'. $modelnid .'/review/status';
      }
      break;

    case 2:
      // Review assigned to Reviewer

      // Editor views review status page and assigns review to 1 (or more) reviewers.
      // Allow number of assigned reviewers be an admin setting, and status page indicates
      // number of assigned reviewers (x of y Total). 1 reviewer per model will be default.

      

      // This needs to be turned into a Form
      // Reviewer needs a dropdown list to select available Reviewers 
      // (plus count of active reviews assigned to each?)

      // lookup the review_id for the open 'modelreview' record
      $sql = "SELECT mr.review_id FROM modelreview mr INNER JOIN modelreview_action mra ON mr.review_id = mra.review_id AND mr.review_sid = mra.review_sid WHERE mr.model_nid = %d;";
      $result = db_query($sql, $modelnid);
      $review_id = db_result($result);
      //drupal_set_message('review_id: '. $review_id);
      //watchdog('modelreview', 'review_id: @reviewid', array('@reviewid' => $review_id), WATCHDOG_NOTICE);

      // get the node id for the latest modelversion, using Views
      $view_args = array($modelnid); // The display we are using takes an argument
      $display_id = 'page_1';   // We are accessing the Latest Version display...
      $view = views_get_view('modelversion'); // ...from the modelversion View
      $view->set_arguments($view_args); // Send Views the arguments it needs
      $view->set_display($display_id);  // and tell it which display we are accessing
      $view->pre_execute(); // run any preprocessing
      $view->execute(); // then execute the view

      $modelversion_nid = $view->render_field('nid', 0);

      // Insert new 'modelreview_action' record
      $action_record = array(
        'review_id' => $review_id,
        'modelversion_nid' => $modelversion_nid,
        'reviewer' => $user->uid, // this needs to be form field value for the selected Reviewer
        'status' => 2,
        'statusdate' => time(),
      );
      drupal_write_record('modelreview_action', $action_record);

      // now update 'modelreview' record with action sid
      $sql = "SELECT mra.review_sid FROM {modelreview_action} mra WHERE mra.review_id = %d ORDER BY mra.statusdate DESC LIMIT 1;";
      $result = db_query($sql, $review_id);
      $review_sid = db_result($result);

      $review_record = array(
        'review_id' => $review_id,
        'review_sid' => $review_sid,
      );
      drupal_write_record('modelreview', $review_record, 'review_id');

      // When model is assigned, send notification to assigned reviewer.

      // transfer user to Review Status page
      $dest = 'model/'. $modelnid .'/review/status';
      break;

    // case 3:
      // Reviewer submits review form with Action recommendation (Revise, Certify, Deny).

    // case 4:
      // Editor sends model review to Author for Revisions

    case 5:
      // Changes Completed, Revisions Needed
      
      // lookup the review_id for the open 'modelreview' record
      $sql = "SELECT mr.review_id FROM modelreview mr INNER JOIN modelreview_action mra ON mr.review_id = mra.review_id AND mr.review_sid = mra.review_sid WHERE mr.model_nid = %d;";
      $result = db_query($sql, $modelnid);
      $review_id = db_result($result);
      //drupal_set_message('review_id: '. $review_id);
      //watchdog('modelreview', 'review_id: @reviewid', array('@reviewid' => $review_id), WATCHDOG_NOTICE);

      // get the node id for the latest modelversion, using Views
      $view_args = array($modelnid); // The display we are using takes an argument
      $display_id = 'page_1';   // We are accessing the Latest Version display...
      $view = views_get_view('modelversion'); // ...from the modelversion View
      $view->set_arguments($view_args); // Send Views the arguments it needs
      $view->set_display($display_id);  // and tell it which display we are accessing
      $view->pre_execute(); // run any preprocessing
      $view->execute(); // then execute the view

      $modelversion_nid = $view->render_field('nid', 0);

      // Insert new 'modelreview_action' record
      $action_record = array(
        'review_id' => $review_id,
        'modelversion_nid' => $modelversion_nid,
        'reviewer' => $user->uid,
        'status' => 4,
        'statusdate' => time(),
      );
      drupal_write_record('modelreview_action', $action_record);

      // now update 'modelreview' record with action sid
      $sql = "SELECT mra.review_sid FROM {modelreview_action} mra WHERE mra.review_id = %d ORDER BY mra.statusdate DESC LIMIT 1;";
      $result = db_query($sql, $review_id);
      $review_sid = db_result($result);

      $review_record = array(
        'review_id' => $review_id,
        'review_sid' => $review_sid,
      );
      drupal_write_record('modelreview', $review_record, 'review_id');

      // transfer user to Review form
      $dest = 'model/'. $modelnid .'/review/status';
      break;

    // case 6:
      // Review Completed - Model Certified

    // case 7:
      // Review Completed - Model Not Certified
  }

  // Go to Model Review Status
  drupal_goto($dest);
}

